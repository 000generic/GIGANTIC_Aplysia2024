#! python

input_paths = open( 'output/3-list-gffs', 'r')

for next_path in input_paths:

    path = next_path[ :-1 ]

    filename = '.'.join( path.split('/')[-1].split('.')[:-1] )
    gspp = path.split( '/' )[ 0 ] 
    folder = path
    
    # Leave a record
    print( 'Processing', filename )

    # Output files
    output_map = open( 'output/4-output/4-map-gff-' + filename, 'w' )
    
    # Initialize variables
    all_genes = {}
    
    # Parsing lines in GFF
    inputGFF = open( path , 'r' )

    for next_line in inputGFF:

        #### chrUn2  transdecoder    gene    5660    11862   .       -       .       ID=NV2g025879000.1;geneID=NV2.25879;Name=xpo4;Note=Exportin-4 (Danio rerio OX%3D7955);Alias=NV2.25879
        
        if ( next_line[ 0 ] != '#' ) and ( len(next_line) > 1 ):

            # Parse tab delimited lines
            data = next_line[ : -1 ].split( '\t' )

            seqid = data[ 0 ] #scaffold/landmark id
            source = data[ 1 ] # ex: FlyBase, Genbank, etc.
            type_info = data[ 2 ] #gene, mRNA,  CDS
            start = data[ 3 ] #coordinate start
            end = data[ 4 ] #coordinate end
            score = data[ 5 ] #typically e-value
            strand = data[ 6 ] #+/-
            phase = data[ 7 ] #CDS info: nucleotide codon frame starts on
            
            attributes = data[ 8 ] #ID, Name, Alias, Parent, Target, Gap, Derives_from, Note, Dbxref, Ontology_term, Is_circular
            tags = attributes.split( ';' ) #Split attributes column into tag value pairs: ",=;"
            tag_ID = tags[ 0 ]

            taginfo = tag_ID.split( '=' )
            identifier = taginfo[ 1 ]

            if type_info == 'gene':
                gene = identifier
                all_genes[ gene ] = []
    
            elif type_info == 'mRNA':
                rna = identifier
                    
            elif type_info == 'CDS':
                cds = identifier
                rna_cds = rna + '\t' + cds
                            
                if rna_cds in all_genes[ gene ]:
                    pass   
                else:
                    all_genes[ gene ].append( rna_cds )

            else:
                pass
                            
    inputGFF.close()

    for next_gene in all_genes:
        
        for next_rna_cds in all_genes[ next_gene ]:
            output_map.write( gspp + '\t' + folder + '\t' + next_gene + '\t' + next_rna_cds + '\n')

    output_map.close()
input_paths.close()
