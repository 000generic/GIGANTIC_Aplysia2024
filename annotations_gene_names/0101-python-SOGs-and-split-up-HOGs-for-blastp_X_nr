#! python

input_map = open( 'input/aplysia-sequence-annotations/18-map-aplysia-genome-orthgroups_X_annotations', 'r' )
input_sohogs = open( 'input/sohog-map/11-map-HOG-to-SOHOG-ids', 'r' )
input_fasta = open( '../../projectdbs/species19/Metazoa-Mollusca-Gastropoda-Aplysiida-Aplysiidae-Aplysia-californica-6500-T1.aa', 'r' )

# Read in HOGs and SOGs map

sogs = []
hogs = []
# LOC101849803    GeneID:101849803        gigantic20220627164247_seq0006140682aa  N0.HOG0001435
for next_line in input_map:

    if next_line[ 0 ] == '[':
        pass
    
    else:
        info = next_line.split( '\t' )
        orthogroup_id = info[ 3 ]
        gigantic_id = info[ 2 ]

        if len( orthogroup_id.split( 'SOG' ) ) > 1:
            sogs.append( gigantic_id )
        else:
            hogs.append( gigantic_id )

# Read in SOHOGs map

sohogs = []
# gigantic20220627164247_seq0000251367aa  Capitella       N0.HOG0000009   N0.SOHOG0000009 
for next_line in input_sohogs:
    info = next_line[ :-1 ].split( '\t' )
    giganticid = info[ 0 ]
    species  = info[ 1 ]
    if species == 'Aplysia':
        sohogs.append( giganticid )
            
giganticid_sequence = {}
giganticid_header = {}
for next_line in input_fasta:
    if next_line[ 0 ] == '>':
        header = next_line[ :-1 ].split( ' ' )[ 0 ]
        gigantic_id = header.split( '-' )[ -1 ]
        giganticid_header[ gigantic_id ] = header
        giganticid_sequence[ gigantic_id ] = ''
        
    else:
        sequence = next_line[ :-1 ]
        giganticid_sequence[ gigantic_id ] = giganticid_sequence[ gigantic_id ] + sequence

# SOG fastas

counter = 0
counter_path = 0
for next_sog in sogs:
    
    if counter == 0:
        counter_path = counter_path + 1
        output_path = 'output-fasta-subsets/101-sogs-subset-' + str( counter_path ) + '.aa'
        output_fasta = open( output_path, 'w' )

        header = giganticid_header[ next_sog ]
        sequence = giganticid_sequence[ next_sog ]
        output = header + '\n' + sequence + '\n'
        output_fasta.write( output )

        counter = counter + 1
        
    elif counter == 15:
        header = giganticid_header[ next_sog ]
        sequence = giganticid_sequence[ next_sog ]
        output = header + '\n' + sequence + '\n'
        output_fasta.write( output )
        
        output_fasta.close()
        counter = 0

    else:
        header = giganticid_header[ next_sog ]
        sequence = giganticid_sequence[ next_sog ]
        output = header + '\n' + sequence + '\n'
        output_fasta.write( output )

        counter = counter + 1

output_fasta.close()

# SOHOG fastas

counter = 0
counter_path = 0
for next_sohog in sohogs:

    if counter == 0:
        counter_path = counter_path + 1
        output_path = 'output-fasta-subsets/101-sohogs-subset-' + str( counter_path ) + '.aa'
        output_fasta = open( output_path, 'w' )

        header = giganticid_header[ next_sohog ]
        sequence = giganticid_sequence[ next_sohog ]
        output = header + '\n' + sequence + '\n'
        output_fasta.write( output )

        counter = counter + 1

    elif counter == 15:
        header = giganticid_header[ next_sohog ]
        sequence = giganticid_sequence[ next_sohog ]
        output = header + '\n' + sequence + '\n'
        output_fasta.write( output )

        output_fasta.close()
        counter = 0

    else:
        header = giganticid_header[ next_sohog ]
        sequence = giganticid_sequence[ next_sohog ]
        output = header + '\n' + sequence + '\n'
        output_fasta.write( output )

        counter = counter + 1

# HOG fastas

counter = 0
counter_path = 0
for next_hog in hogs:

    if next_hog in sohogs:
        pass
    else:
    
        if counter == 0:
            counter_path = counter_path + 1
            output_path = 'output-fasta-subsets/101-hogs-subset-' + str( counter_path ) + '.aa'
            output_fasta = open( output_path, 'w' )

            header = giganticid_header[ next_hog ]
            sequence = giganticid_sequence[ next_hog ]
            output = header + '\n' + sequence + '\n'
            output_fasta.write( output )

            counter = counter + 1

        elif counter == 600:
            header = giganticid_header[ next_hog ]
            sequence = giganticid_sequence[ next_hog ]
            output = header + '\n' + sequence + '\n'
            output_fasta.write( output )

            output_fasta.close()
            counter = 0

        else:
            header = giganticid_header[ next_hog ]
            sequence = giganticid_sequence[ next_hog ]
            output = header + '\n' + sequence + '\n'
            output_fasta.write( output )

            counter = counter + 1
            
output_fasta.close()
input_map.close()
input_fasta.close()
