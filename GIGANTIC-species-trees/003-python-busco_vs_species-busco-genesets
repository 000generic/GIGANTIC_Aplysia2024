#! python
# GIGANTIC species tree script

# SCRIPT: Generate ( each BUSCO all species ) and ( each species all BUSCO ) gene sets

# STRUCTURE 
# ../1-databases/3-projectDB/projectdb-buscos/busco_metazoa-Kingdom_unclassified-Phylum_unclassified-Choanoflagellata-Craspedida-Salpingoecidae-Monosiga-brevicollis-81824-T1/run_metazoa_odb10/busco_sequences/single_copy_busco_sequences/532406at33208a.faa

# ../busco/output/3-busco_metazoa-Annelida-Polychaeta-Order_unclassified14-Capitellidae-Capitella-teleta-283909-T1/run_metazoa_odb10/busco_sequences/single_copy_busco_sequences/

# intput paths to busco gene sets
input_buscos = open( 'output/2-list-busco-faa', 'r' )

# provide paths to directories that will contain the gene sets to be produced - directories generated by 002
busco_allspecies_path = 'output/eachbusco_X_allspecies'
species_allbusco_path = 'output/eachspecies_X_allbusco'

# read in busco gene sets
for next_busco in input_buscos:
    
    # read fasta into a dictionary rather than reading directly to an output file to remove breaks in the sequence itself
    header_sequence = {}

    # parse path to busco fasta for details
    info_1 = next_busco.split( '/' )
    info_2 = info_1[ 3 ].split( '-' )

    #kingdom = info_2[ 1 ] 
    phylum = info_2[ 2 ] 
    classes = info_2[ 3 ] 
    order = info_2[ 4 ] 
    family = info_2[ 5 ] 
    genus = info_2[ 6 ] 
    species =  info_2[ 7 ]
    species = species.split( '.' )[ 0 ]
    
    phyloname = 'Metazoa-' + phylum + '-' + classes + '-' + order + '-' + family + '-' + genus + '-' + species
    
    busco_fasta = info_1[ -1 ]
    busco_id = busco_fasta.split( '.' )[ 0 ]

    # create input and output file handles
    input_busco = open( next_busco[ :-1 ], 'r' )

    output_file_1 = busco_allspecies_path + '/projectdb-eachbusco-allspecies-busco' + busco_id + '.aa'
    output_busco = open( output_file_1, 'a' )

    output_file_2 = species_allbusco_path + '/projectdb-eachspecies-allbusco-' + phyloname + '.aa'
    output_gspp = open( output_file_2, 'a' )

    # read in busco single complete fasta files
    for next_line in input_busco:

        # generate headers and add to dictionaries
        if next_line[ 0 ] == '>':
            
            header = '>' + next_line[ 1:-1 ] + '-' + 'busco' + busco_id 
            header_sequence[ header] = ''

        else:

            sequence = next_line[ :-1 ]
            header_sequence[ header] = header_sequence[ header] + sequence

    # read dictionary of headers and sequences into fasta files
    for header in sorted( header_sequence.keys() ):

        sequence = header_sequence[ header ]
        
        output = header + '\n' + sequence + '\n'
        output_busco.write( output )
        output_gspp.write( output )
        
    input_busco.close()
    output_busco.close()
    output_gspp.close()
    
input_buscos.close()
