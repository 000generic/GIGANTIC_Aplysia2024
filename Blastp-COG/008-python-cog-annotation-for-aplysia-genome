#! python

input_list = open( 'output/7-list-COGs', 'r' )
output_map = open( 'output/8-cog-annotations-ALL', 'w' )
output_aplysia = open( 'output/8-cog-annotations-APLYSIA', 'w' )
output_aplysia_excel = open( 'output/8-cog-annotations-APLYSIA-excel', 'w' )
output_aplysia_excel_counts = open( 'output/8-cog-annotations-APLYSIA-excel-counts', 'w' )

# COGmodels2      Metazoa-Nematoda-Chromadorea-Rhabditida-Rhabditidae-Caenorhabditis-elegans-gigantic20220627164247_seq0006871474aa       Metazoa-Mollusca-Gastropoda-Aplysiida-Aplysiidae-Aplysia-californica-gigantic20220627164247_seq0006140682aa Metazoa-Arthropoda-Insecta-Diptera-Drosophilidae-Drosophila-melanogaster-gigantic20220627164247_seq0000829298aa Metazoa-Chordata-Mammalia-Primates-Hominidae-Homo-sapiens-gigantic20220627164247_seq0004231042aa    Metazoa-Mollusca-Gastropoda-Aplysiida-Aplysiidae-Aplysia-californica-gigantic20220627164247_seq0006140833aa

method_clade_annotations = {}
method_clade_annotations[ 'lite' ] = {}
method_clade_annotations[ 'all' ] = {}

clades = [ 'Models', 'Bilateria', 'Protostomia', 'Lophotrochozoa', 'Mollusca', 'Conchifera', 'Cephalopoda', 'Bivalvia', 'Gastropoda', 'Ethyneura' ]

for next_method in method_clade_annotations.keys():
    for next_clade in clades:
        method_clade_annotations[ next_method ][ next_clade ] = {} 

# output/5-COGcephalopoda-species19-blastp-rbh-eminus5-core-ortholog-gene-sets-HOMOLOGS
for next_file in input_list:

    file_name = next_file[ :-1 ]
    input_file = open( file_name, 'r' )
    info_file = file_name.split( '-' )
    method_number = info_file[ 0 ][ -1 ]
    if  method_number == '5':
        method = 'lite'
    elif method_number == '6':
        method = 'all'
    else:
        print( 'Error!' )
    clade = info_file[ 1 ][ 3: ]
    clade = clade.capitalize()
    
    for next_line in input_file:
        
        info = next_line[ :-1 ].split( '\t' )
        cog_id = info[ 0 ]
        sequences = ''
        
        for next_sequence in info[ 1: ]:
            sequences = sequences + next_sequence + ', '
        sequences = sequences[ :-2 ]

        method_clade_annotations[ method ][ clade ][ cog_id ] = sequences

    input_file.close()


output = '[ Method ]' + '\t' + '[ Clade ]' + '\t' + '[ COG ID ]' + '\t' + '[ COG GIGANTIC IDs ]' + '\n'
output_map.write( output )
output = '[ Aplysia GIGANTIC ID ]' + '\t' + '[ COG GIGANTIC IDs ]' + '\t' + '[ Clade ]' + '\t' + '[ Method ]' + '\n'
output_aplysia.write( output )

aplysia_method_clade_cogsequences = {}
for next_method in method_clade_annotations.keys():
    for next_clade in clades:
        for next_cog_id in method_clade_annotations[ next_method ][ next_clade ]:
            sequences = method_clade_annotations[ next_method ][ next_clade ][ next_cog_id ]
            output = next_method + '\t' + next_clade + '\t' + next_cog_id + '\t' + sequences + '\n'
            output_map.write( output )

            info_sequences = sequences.split( ', ' )
            for next_sequence in info_sequences:
                if len( next_sequence.split( 'Aplysia' ) ) > 1:
                    output = next_sequence + '\t' + sequences + '\t' + next_clade + '\t' + next_method + '\n'
                    output_aplysia.write( output )

                    annotation = next_cog_id + ' | ' + sequences
                    
                    if next_sequence in aplysia_method_clade_cogsequences.keys():
                        if next_method in aplysia_method_clade_cogsequences[ next_sequence ].keys():
                            aplysia_method_clade_cogsequences[ next_sequence ][ next_method ][ next_clade ] = annotation
                        else:
                            aplysia_method_clade_cogsequences[ next_sequence ][ next_method ] = {}
                            aplysia_method_clade_cogsequences[ next_sequence ][ next_method ][ next_clade ] = annotation
                    else:
                        aplysia_method_clade_cogsequences[ next_sequence ] = {}
                        aplysia_method_clade_cogsequences[ next_sequence ][ next_method ] = {}
                        aplysia_method_clade_cogsequences[ next_sequence ][ next_method ][ next_clade ] = annotation
                else:
                    pass
output = '[ Aplysia GIGANTIC ID ]' + '\t'
for next_clade in clades:
    output = output + '[ LITE ' + next_clade + ' ]' + '[ ALL ' + next_clade + ' ]' + '\t'   
output = output[ :-1 ] + '\n'
output_aplysia_excel.write( output )
output_aplysia_excel_counts.write( output )

for next_sequence in aplysia_method_clade_cogsequences.keys():
    output = next_sequence + '\t'
    output_count = next_sequence + '\t'
    for next_clade in clades:
        if next_clade in aplysia_method_clade_cogsequences[ next_sequence ][ 'lite' ].keys():
            annotation = aplysia_method_clade_cogsequences[ next_sequence ][ 'lite' ][ next_clade ]
            info_annotation = annotation.split( ' | ' )
            cogid = info_annotation[ 0 ]
            sequences = info_annotation[ 1 ]
            info_sequences = sequences.split( ', ' )
            cog_count_id = cogid + '__' + str( len( info_sequences ) )
            
        else:
            annotation = 'None'
            cog_count_id = 'None__0'
        
        output = output + annotation + '\t'
        output_count = output_count + cog_count_id + '\t'
        
        #if next_clade in annotation = aplysia_method_clade_cogsequences[ next_sequence ][ 'all' ][ next_clade ]

    output = output[ :-1 ] + '\n'
    output_aplysia_excel.write( output )
    output_count = output_count[ :-1 ] + '\n'
    output_aplysia_excel_counts.write( output_count )

input_list.close()
output_map.close()
output_aplysia.close()
output_aplysia_excel.close()
output_aplysia_excel_counts.close()
