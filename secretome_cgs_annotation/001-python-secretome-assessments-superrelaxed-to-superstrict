#! python

input_idswitcher = open( '/scratch/eric/projects/aplysia/idswapper/USEME-CLEAN-species19-idswapper-from-script-008', 'r' )
input_annotations = open( '/scratch/eric/projects/aplysia/annotations-features/annotations-features-species19-map/output/2-map-species19-annotations-features-interproscan-deeploc2-signalp6-deeptmhmm-metapredict-giganticids', 'r' )
output_all = open( 'output/1-species19-all_sequences-all_assessments', 'w' )
output_counts = open( 'output/1-species19-all_species-all_summary-counts', 'w' )


gigantics_sources = {}
for next_switch in input_idswitcher:
    info = next_switch[ :-1 ].split( '\t' )
    giganticid = info[ 0 ]
    sourceid = info[ 2 ].split( '-' )[ -1 ]
    gigantics_sources[ giganticid ] = sourceid
    
genera_annotations = {}
firstline = False
for next_line in input_annotations:
    info = next_line[ :-1 ].split( '\t' )
    
    giganticID  = info[ 0 ]
    deepLoc2_SM = info[ 1 ]
    deepLoc2_SP = info[ 2 ]
    deepLoc2_TM = info[ 3 ]
    deepTMHMM_SP = info[ 4 ]
    deepTMHMM_TM =info[ 5 ]
    metapredict_IDR = info[ 6 ]
    signalP6_SP = info[ 7 ]
    ipr_AntiFam = info[ 8 ]
    ipr_CDD = info[ 9 ]
    ipr_Coils = info[ 10 ]
    ipr_FunFam = info[ 11 ]
    ipr_Gene3D = info[ 12 ]
    ipr_Hamap = info[ 13 ]
    ipr_MobiDBLite = info[ 14 ]
    ipr_PANTHER = info[ 15 ]
    ipr_PIRSF = info[ 16 ]
    ipr_PRINTS = info[ 17 ]
    ipr_Pfam = info[ 18 ]
    ipr_ProSitePatterns = info[ 19 ]
    ipr_ProSiteProfiles = info[ 20 ]
    ipr_SFLD = info[ 21 ]
    ipr_SMART = info[ 22 ]
    ipr_SUPERFAMILY = info[ 23 ]
    ipr_TIGRFAM = info[ 24 ]
    ipr_GO = info[ 25 ]

    if len( giganticID.split( '-' ) ) > 1:
        genus = giganticID.split( '-' )[ 5 ]
    else:
        genus = giganticID
        
    if genus not in genera_annotations.keys():
        genera_annotations[ genus ] = {}
        genera_annotations[ genus ][ 'NO_SSP_superrelaxed' ] = []
        genera_annotations[ genus ][ 'YES_SSP_superrelaxed' ] = []
        genera_annotations[ genus ][ 'NO_SSP_relaxed' ] = []
        genera_annotations[ genus ][ 'YES_SSP_relaxed' ] = []
        genera_annotations[ genus ][ 'NO_SSP_strict' ] = []
        genera_annotations[ genus ][ 'YES_SSP_strict' ] = []
        genera_annotations[ genus ][ 'NO_SSP_superstrict' ] = []
        genera_annotations[ genus ][ 'YES_SSP_superstrict' ] = []
        genera_annotations[ genus ][ 'NO_SSP_deeploc' ] = []
        genera_annotations[ genus ][ 'YES_SSP_deeploc' ] = []
        genera_annotations[ genus ][ 'NO_SSP_deeptmhmm' ] = []
        genera_annotations[ genus ][ 'YES_SSP_deeptmhmm' ] = []
        genera_annotations[ genus ][ 'NO_SSP_signalp' ] = []
        genera_annotations[ genus ][ 'YES_SSP_signalp' ] = []

    if giganticID in gigantics_sources.keys():
        outgigantic = gigantics_sources[ giganticID ]
    else:
        outgigantic = giganticID
    output = genus + '\t' + outgigantic + '\t' 
    outdata = deepLoc2_SM + '\t' + deepLoc2_SP + '\t' + deepLoc2_TM + '\t' + deepTMHMM_SP + '\t' + deepTMHMM_TM + '\t' + signalP6_SP + '\t' + metapredict_IDR + '\t' + ipr_MobiDBLite + '\n'

    # superrelaxed SSP assessment
    outsuperrelaxed = 'NO_SSP_superrelaxed'
    genera_annotations[ genus ][ 'NO_SSP_superrelaxed' ].append( giganticID )
    if ( deepLoc2_SP != 'None' ) or ( deepTMHMM_SP != 'None') or ( signalP6_SP != 'None' ):
        if ( metapredict_IDR != 'None') or ( ipr_MobiDBLite != 'None' ):
            if ( deepLoc2_TM == 'None') or ( deepTMHMM_TM == 'None' ): 
                if ipr_Pfam == 'None':
                    outsuperrelaxed = 'YES_SSP_superrelaxed'
                    genera_annotations[ genus ][ 'YES_SSP_superrelaxed' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_superrelaxed' ].remove( giganticID )
                    
    # relaxed SSP assessment
    outrelaxed = 'NO_SSP_relaxed'
    genera_annotations[ genus ][ 'NO_SSP_relaxed' ].append( giganticID )
    if ( deepLoc2_SP != 'None') or ( deepTMHMM_SP != 'None') or ( signalP6_SP != 'None' ):
        if ( metapredict_IDR != 'None') or ( ipr_MobiDBLite != 'None' ):
            if ( deepLoc2_TM == 'None') and ( deepTMHMM_TM == 'None' ):
                if ipr_Pfam == 'None':
                    outrelaxed = 'YES_SSP_relaxed'
                    genera_annotations[ genus ][ 'YES_SSP_relaxed' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_relaxed' ].remove( giganticID )
                    
    # strict SSP assessment
    outstrict = 'NO_SSP_strict'
    genera_annotations[ genus ][ 'NO_SSP_strict' ].append( giganticID )
    if ( deepLoc2_SP != 'None') and ( deepTMHMM_SP != 'None') and ( signalP6_SP != 'None' ):
        if ( metapredict_IDR != 'None' ) and ( ipr_MobiDBLite != 'None' ):
            if ( deepLoc2_TM == 'None' ) or ( deepTMHMM_TM == 'None' ):
                if ipr_Pfam == 'None':
                    outstrict = 'YES_SSP_strict'
                    genera_annotations[ genus ][ 'YES_SSP_strict' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_strict' ].remove( giganticID )
                    
    # superstrict SSP assessment 
    outsuperstrict = 'NO_SSP_superstrict'
    genera_annotations[ genus ][ 'NO_SSP_superstrict' ].append( giganticID )
    if ( deepLoc2_SP != 'None') and ( deepTMHMM_SP != 'None') and ( signalP6_SP != 'None' ):
        if ( metapredict_IDR != 'None' ) and ( ipr_MobiDBLite != 'None' ):
            if ( deepLoc2_TM == 'None' ) and ( deepTMHMM_TM == 'None' ):
                if ipr_Pfam == 'None':
                    outsuperstrict = 'YES_SSP_superstrict'
                    genera_annotations[ genus ][ 'YES_SSP_superstrict' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_superstrict' ].remove( giganticID )
                    
    # DeepLoc2 assessment
    outdeeploc = 'NO_SSP_deeploc'
    genera_annotations[ genus ][ 'NO_SSP_deeploc' ].append( giganticID )
    if deepLoc2_SP != 'None':
        if ( metapredict_IDR != 'None' ) or ( ipr_MobiDBLite != 'None' ):
            if deepLoc2_TM == 'None':
                if ipr_Pfam == 'None':
                    outdeeploc = 'YES_SSP_deeploc'  
                    genera_annotations[ genus ][ 'YES_SSP_deeploc' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_deeploc' ].remove( giganticID )
                    
    # DeepTMHMM assessment
    outdeeptmhmm =  'NO_SSP_deeptmhmm'
    genera_annotations[ genus ][ 'NO_SSP_deeptmhmm' ].append( giganticID )
    if deepTMHMM_SP != 'None':
        if ( metapredict_IDR != 'None' ) or ( ipr_MobiDBLite != 'None' ):
            if deepTMHMM_TM == 'None':
                if ipr_Pfam == 'None':
                    outdeeptmhmm = 'YES_SSP_deeptmhmm'
                    genera_annotations[ genus ][ 'YES_SSP_deeptmhmm' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_deeptmhmm' ].remove( giganticID )
                    
    # SignalP assessment
    outsignalp = 'NO_SSP_signalp'
    genera_annotations[ genus ][ 'NO_SSP_signalp' ].append( giganticID )
    if signalP6_SP != 'None':
        if ( metapredict_IDR != 'None' ) or ( ipr_MobiDBLite != 'None' ):
            if ( deepLoc2_TM == 'None' ) or ( deepTMHMM_TM == 'None' ):
                if ipr_Pfam == 'None':
                    outsignalp = 'YES_SSP_signalp'
                    genera_annotations[ genus ][ 'YES_SSP_signalp' ].append( giganticID )
                    genera_annotations[ genus ][ 'NO_SSP_signalp' ].remove( giganticID )

    output = output + outsuperrelaxed + '\t' + outrelaxed + '\t' + outstrict + '\t' + outsuperstrict + '\t' + outdeeploc + '\t' + outdeeptmhmm + '\t' + outsignalp + '\t' + outdata
    if firstline == False:
        firstline = True
        header = 'Genus' + '\t' + 'Identifier' + '\t' + 'Superrelaxed' + '\t' + 'Relaxed' + '\t'  + 'Strict' + '\t' + 'Superstrict' + '\t' + 'DeepLoc' + '\t' + 'DeepTMHMM' + '\t' + 'SignalP' + '\t' + 'DeepLoc2_SM' + '\t' + 'DeepLoc2_SP' + '\t' + 'DeepLoc2_TM' + '\t' + 'DeepTMHMM_SP' + '\t' + 'DeepTMHMM_TM' + '\t' + 'SignalP6_SP' + '\t' + 'Metapredict_IDR' + '\t' + 'MobiDBLite_IDR' + '\n'
        output_all.write( header )
    else:
        output_all.write( output )

for next_genus in sorted( genera_annotations.keys() ):
    if len( next_genus.split( ' ' ) ) == 1:
        output = next_genus + '\t' 
        for next_assessment in sorted( genera_annotations[ next_genus ].keys() ):
            next_count = str( len( genera_annotations[ next_genus ][ next_assessment ] ) )
            output = output + next_assessment + '\t' + next_count + '\t'
        output = output[ :-1 ] + '\n'
        output_counts.write( output )

        for next_assessment in sorted( genera_annotations[ next_genus ].keys() ):
            if len( next_assessment.split( 'ES_' )) >1 :
                new_file = 'output/1-' + next_genus + '-' + next_assessment.split( '_' )[ -1 ] + '-all-assessments'
                output_assessment = open( new_file, 'w' )
                for next_id in genera_annotations[ next_genus ][ next_assessment ]:
                    output = next_id + '\n'
                    output_assessment.write( output )
        output_assessment.close()
    
input_annotations.close()
output_all.close()
output_counts.close()
