#! python

input_blasts = open( 'output/3-blast-secretomes', 'r' )
input_annotations_pfam_absent = open( 'output/3-annotation-secretomes-pfam_absent', 'r' )
input_annotations_pfam_ok = open( 'output/3-annotation-secretomes-pfam_ok', 'r' )

genera = [ 'Aplysia', 'Elysia', 'Achatina', 'Pomacea', 'Gigantopelta', 'Lottia', 'Crassostrea', 'Mizuhopecten', 'Cyclina', 'Octopus', 'Argonauta', 'Nautilus', 'Acanthopleura', 'Lingula', 'Phoronis', 'Capitella', 'Caenorhabditis', 'Drosophila', 'Homo' ]

### Blast secretomes

# read blast secretomes into dictionaries

blastRun_blastIntegrated_Secretomeids_seqids = {}
seqids_blastRun_blastIntegrated_Secretomeids = {}
blastSecretome_countsData = {}

blast_run_names = [ 'evalue_minus_4', 'evalue_minus_3', 'evalue_minus_2', 'evalue_minus_1', 'evalue_1', 'evalue_2' ]

for next_name in blast_run_names:
    blastRun_blastIntegrated_Secretomeids_seqids[ next_name ] = {}

# read in blast secretomes

# /scratch/eric/projects/aplysia/secretome/cgs-blast/leonid_ssp709/output/30-clusters-Species19-leonid_ssp709-blastp-evalue_1
for next_blast_secretome in input_blasts:
    input_secretome = open( next_blast_secretome[ :-1 ], 'r' )
    filename = next_blast_secretome[ :-1 ].split( '/' )[ -1 ]
    info_filename = filename.split( '-' )
    run_name = info_filename[ -1 ]

    # leonid_ssp709_evalue_1_cluster_9        13      Apl_1 Ely_1 Ach_2 Pom_1 Gig_1 Lot_1 Cra_0 Miz_1 Cyc_1 Oct_1 Arg_0 Nau_0 Aca_1 Lin_0 Pho_0 Cap_1 Cae_0 Dro_0 Hom_1       Octopus-bimaculoides-LOC106870130_XP_014771606_1, Achatina-fulica-Afu002195, Gigantopelta-aegis-LOC121390103_XP_041377758_1, Mizuhopecten-yessoensis-LOC110463993_XP_021374653_1, Capitella-teleta-CAPTEDRAFT_155099_ELU04705_1, Elysia-chlorotica-EGW08_070991_RUS71748_1, Lottia-gigantea-LOTGIDRAFT_149279_XP_009057848_1, Cyclina-sinensis-evm_model_Hic_asm_4_1460_1, Acanthopleura-granulata-model_g26731_t1, Aplysia-californica-LOC101845040-SCP_Small_Cardioactive_peptide-rgs_leonid_ssp709, Homo-sapiens-STARD9_XP_011520133_1, Achatina-fulica-Afu023591, Pomacea-canaliculata-LOC112557644_XP_025083419_1
    for next_line in input_secretome:
        info = next_line[ :-1 ].split( '\t' )

        secretome_id = info[ 0 ]

        secretome_count = info [ 1 ]
        genera_counts = info[ 2 ]
        count_data = secretome_count + '___' + genera_counts
        blastSecretome_countsData[ secretome_id ] = count_data
        
        seqids = info[ -1 ].split( ', ' )
        blastRun_blastIntegrated_Secretomeids_seqids[ run_name ] [ secretome_id ] = seqids

        for next_seqid in seqids:
            if next_seqid not in seqids_blastRun_blastIntegrated_Secretomeids.keys():
                seqids_blastRun_blastIntegrated_Secretomeids[ next_seqid ] = {}
                for next_run_name in blast_run_names:
                    seqids_blastRun_blastIntegrated_Secretomeids[ next_seqid ][ next_run_name ] = []

            seqids_blastRun_blastIntegrated_Secretomeids[ next_seqid ][ run_name ].append( secretome_id )

### Annotation secretomes

# read annotation secretomes into dictionaries
seqids_annoNames_annoScores = {}
annotation_secretome_names = [ 'superrelaxed_pfam_absent', 'relaxed_pfam_absent', 'strict_pfam_absent', 'superstrict_pfam_absent', 'deeploc_pfam_absent', 'deeptmhmm_pfam_absent', 'signalp_pfam_absent', 'superrelaxed_pfam_ok', 'relaxed_pfam_ok', 'strict_pfam_ok', 'superstrict_pfam_ok', 'deeploc_pfam_ok', 'deeptmhmm_pfam_ok','signalp_pfam_ok' ]

# PFAM ABSENT

# /scratch/eric/projects/aplysia/secretome/cgs-annotation/output/2-species19-secretome-no_pfam-deeploc
for next_annotation_secretome in input_annotations_pfam_absent:
    input_secretome = open( next_annotation_secretome[ :-1 ], 'r' )
    filename = next_blast_secretome[ :-1 ].split( '/' )[ -1 ]
    info_filename = filename.split( '-' )
    annotation_type = info_filename[ -1 ]
    annotation_name = annotation_type + '_pfam_absent'

    # Capitella       CAPTEDRAFT_199234_ELT87037_1    YES_SSP_superrelaxed    YES_SSP_relaxed YES_SSP_strict  YES_SSP_superstrict     YES_SSP_deeptmhmm       YES_SSP_deeptmhmm       YES_SSP_signalp DeepLoc2_SM:Extracellular_Signalpeptide DeepLoc2_LOCAL:Extracellular_SIGNAL:Signalpeptide  None    DeepTMHMM_SP1:33        None    SignalP6_SP_n1:14_h15:28_c29:33 MetaPredict_IDR_65_104  MobiDBLite_mobidb-lite_71_104
    for next_line in input_secretome:
        info = next_line[ :-1 ].split( '\t' )
        genus = info[ 0 ]
        seqid = info[ 1 ]
        uniqid = genus + '-' + seqid
 
        if uniqid not in seqids_annoNames_annoScores.keys():
            seqids_annoNames_annoScores[ uniqid ] = {}
            for next_name in annotation_secretome_names:
                seqids_annoNames_annoScores[ uniqid ][ next_name ] = ''
                
        assessments = info[ 2:9 ]
        for next_assessment in assessments:
            info_assessment = next_assessment.split( '_' )
            annotation_name = info_assessment[ -1 ] + '_pfam_absent'
            assessment_score = info_assessment[ 0 ]
            
            seqids_annoNames_annoScores[ uniqid ][ annotation_name ] =  assessment_score

# PFAM OK

for next_annotation_secretome in input_annotations_pfam_ok:
    input_secretome = open( next_annotation_secretome[ :-1 ], 'r' )
    filename = next_blast_secretome[ :-1 ].split( '/' )[ -1 ]
    info_filename = filename.split( '-' )
    annotation_type = info_filename[ -1 ]
    annotation_name = annotation_type + '_pfam_ok'

    for next_line in input_secretome:
        info = next_line[ :-1 ].split( '\t' )
        genus = info[ 0 ]
        seqid = info[ 1 ]
        uniqid = genus + '-' + seqid
        
        if uniqid not in seqids_annoNames_annoScores.keys():
            seqids_annoNames_annoScores[ uniqid ] = {}
            for next_name in annotation_secretome_names:
                seqids_annoNames_annoScores[ uniqid ][ next_name ] = ''

        assessments = info[ 2:9 ]
        for next_assessment in assessments:
            info_assessment = next_assessment.split( '_' )
            annotation_name = info_assessment[ -1 ] + '_pfam_ok'
            assessment_score = info_assessment[ 0 ]

            seqids_annoNames_annoScores[ uniqid ][ annotation_name ] =  assessment_score

### Integration
    
# intersect blast secretomes x annotation secretomes - superrelaxed = if any blast secretome sequence are also in a given annotation secretome, accept all blast secretome sequences, otherwise reject all

header_keepers = 'Seqid' + '\t' + 'Integrated Secretome Cluster ID' + '\t' + 'Cluster Size' + '\t' + 'Blast Cluster Origin' + '\n'
header_droppers = 'Seqid' + '\t' + 'Blast Cluster Origin' + '\n'
header_clusters = 'Integrated Secretome Cluster ID' + '\t' + 'Cluster Size' + '\t' + 'Blast Cluster Origin' + '\t' + 'Seqids' + '\n'

for next_blastRun in blastRun_blastIntegrated_Secretomeids_seqids:
    for next_annotation in annotation_secretome_names:

        secretome_core_id = 'blast_' + next_blastRun + '_X_annotation_' + next_annotation + '-filter_relaxed'

        next_keepers = 'output/4-' + secretome_core_id + '-keepers'
        next_droppers = 'output/4-' + secretome_core_id + '-droppers'
        next_clusters = 'output/4-' + secretome_core_id + '-clusters'
        
        output_keepers = open( next_keepers, 'w' )
        output_droppers = open( next_droppers, 'w' )
        output_clusters = open( next_clusters, 'w' )
        
        output_keepers.write( header_keepers )
        output_droppers.write( header_droppers )
        output_clusters.write( header_clusters )

        count = 0
        for next_secretome in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ]:
            keep_secretome = False
            
            for next_seqid in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                info_seqid = next_seqid.split( '-' )
                next_uniqid = info_seqid[ 0 ] + '-' + info_seqid[ 2 ]
                if next_uniqid in seqids_annoNames_annoScores.keys(): 
                    if seqids_annoNames_annoScores[ next_uniqid ][ next_annotation ] == 'YES':
                        keep_secretome = True

            cluster_size = str( len( blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ] ) )
            
            if keep_secretome == True:

                count = count + 1

                all_keeper_secretome_seqids = ', '.join( blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ] )
                
                genera_counts = {}
                for next_genus in genera:
                    genera_counts[ next_genus ] = []

                for next_keeper in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                    output = next_keeper + '\t' + 'Integrated_Secretome-leonid_ssp709-' + secretome_core_id + '-cluster_' + str( count ) +  '\t' + next_secretome +  '\n'
                    output_keepers.write( output )

                output = 'Integrated_Secretome-leonid_ssp709-' + secretome_core_id + '-cluster_' + str( count ) + '\t' + cluster_size + '\t' +  next_secretome + '\t' + all_keeper_secretome_seqids + '\n'
                output_clusters.write( output )

            else:
                for next_seqid in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                    output = next_seqid + '\t' + next_secretome + '\n'
                    output_droppers.write( output )                                        

        output_keepers.close()
        output_droppers.close()
        output_clusters.close()

# intersect blast secretomes x annotation secretomes - superstrict = if all blast secretome sequences are also in a given annotation secretome, accept all blast secretome sequences, otherwise reject all
header_keepers = 'Seqid' + '\t' + 'Integrated Secretome Cluster ID' + '\t' + 'Cluster Size' + '\t' + 'Blast Cluster Origin' + '\n'
header_droppers = 'Seqid' + '\t' + 'Blast Cluster Origin' + '\n'
header_clusters = 'Integrated Secretome Cluster ID' + '\t' + 'Cluster Size' + '\t' + 'Blast Cluster Origin' + '\t' + 'Seqids' + '\n'

for next_blastRun in blastRun_blastIntegrated_Secretomeids_seqids:
    for next_annotation in annotation_secretome_names:

        secretome_core_id = 'blast_' + next_blastRun + '_X_annotation_' + next_annotation + '-filter_strict'

        next_keepers = 'output/4-' + secretome_core_id + '-keepers'
        next_droppers = 'output/4-' + secretome_core_id + '-droppers'
        next_clusters = 'output/4-' + secretome_core_id + '-clusters'

        output_keepers = open( next_keepers, 'w' )
        output_droppers = open( next_droppers, 'w' )
        output_clusters = open( next_clusters, 'w' )
        
        output_keepers.write( header_keepers )
        output_droppers.write( header_droppers )        
        output_clusters.write( header_clusters )
        
        count = 0
        for next_secretome in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ]:
            keep_secretome = True

            for next_seqid in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                
                info_seqid = next_seqid.split( '-' )
                next_uniqid = info_seqid[ 0 ] + '-' + info_seqid[ 2 ]

                if next_uniqid in seqids_annoNames_annoScores.keys():
                    if seqids_annoNames_annoScores[ next_uniqid ][ next_annotation ] == 'NO':
                        keep_secretome = False
                        
            cluster_size = str( len( blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ] ) )

            if keep_secretome == True:
                count = count + 1
                all_keeper_secretome_seqids = ', '.join( blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ] )
                output = 'Integrated_Secretome-leonid_ssp709-' + secretome_core_id + '-cluster_' + str( count ) + '\t' + cluster_size +  '\t' + next_secretome + '\t' + all_keeper_secretome_seqids + '\n'
                output_clusters.write( output )
                
                for next_keeper in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                    output = next_keeper + '\t' + 'Integrated_Secretome-leonid_ssp709-' + secretome_core_id + '-cluster_' + str( count ) + '\t' + cluster_size + '\t' + next_secretome  + '\n'
                    output_keepers.write( output )

            else:
                for next_seqid in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                    output = next_seqid + '\t' + next_secretome + '\n'
                    output_droppers.write( output )

        output_keepers.close()
        output_droppers.close()
        output_clusters.close()

# intersect blast secretomes x annotation secretomes - specific = keep only blast secretome sequences also in a given  annotation secretome, reject only blast sequences not also in a given annotation secretome
header_keepers = 'Seqid' + '\t' + 'Integrated Secretome Cluster ID' + '\t' + 'Blast Cluster Origin'  + '\n'
header_droppers = 'Seqid' + '\t' + 'Blast Cluster Origin' + '\n'
header_clusters = 'Integrated Secretome Cluster ID' + '\t' + 'Original Blast Cluster ID' + '\t' +  'Cluster Size' + '\t' + 'Dropped From Original' + '\t' + 'Original Blast Cluster Size' + '\t'
for next_genus in genera:
    header_clusters = header_clusters + next_genus + '\t'
header_clusters = header_clusters + 'Blast Cluster Origin' + '\t' + 'Seqids' + '\n'

for next_blastRun in blastRun_blastIntegrated_Secretomeids_seqids:
    for next_annotation in annotation_secretome_names:

        secretome_core_id = 'blast_' + next_blastRun + '_X_annotation_' + next_annotation + '-filter_specific'

        next_keepers = 'output/4-' + secretome_core_id + '-keepers'
        next_droppers = 'output/4-' + secretome_core_id + '-droppers'
        next_clusters = 'output/4-' + secretome_core_id + '-clusters'
        
        output_keepers = open( next_keepers, 'w' )
        output_droppers = open( next_droppers, 'w' )
        output_clusters = open( next_clusters, 'w' )
        
        output_keepers.write( header_keepers )
        output_droppers.write( header_droppers )
        output_clusters.write( header_clusters )
        
        count = 0
        # dropped leonid_ssp709_evalue_minus_4_cluster_271 Aplysia-californica-LOC101856550-Aerolysin_8-rgs_leonid_ssp709 ### remove 
        for next_secretome in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ]:

            if next_secretome == 'leonid_ssp709_evalue_minus_4_cluster_55':
                print( blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ] )

            keepers = []
            droppers = []

            for next_seqid in blastRun_blastIntegrated_Secretomeids_seqids[ next_blastRun ][ next_secretome ]:
                info_seqid = next_seqid.split( '-' )
                next_uniqid = info_seqid[ 0 ] + '-' + info_seqid[ 2 ]

                if next_uniqid in seqids_annoNames_annoScores.keys():
                        
                    if seqids_annoNames_annoScores[ next_uniqid ][ next_annotation ] == 'YES':
                        keepers.append( next_seqid )
                    else:
                        droppers.append( next_seqid ) # this will include NO in annotation gene set
                else:
                    droppers.append( next_seqid ) # this will include seqid not in annotation gene set 

            cluster_size = str( len( keepers ) )

            genera_counts = {}
            for next_genus in genera:
                genera_counts[ next_genus ] = []                                                    
            
            if len( keepers ) > 0:
                count = count + 1
                
                keeper_secretome_seqids = ''
                for next_keeper in keepers:

                    output = next_keeper + '\t' + 'Integrated_Secretome-leonid_ssp709-' + secretome_core_id + '-cluster_' + str( count ) + '\t' + cluster_size + '\t' + next_secretome + '\n'
                    output_keepers.write( output )

                    next_genus = next_keeper.split( '-' )[ 0 ]
                    genera_counts[ next_genus ].append( next_keeper )
                    
                    keeper_secretome_seqids = keeper_secretome_seqids + next_keeper + ', '
                all_keeper_secretome_seqids = keeper_secretome_seqids[ :-2 ]

                all_genera_counts = ''
                all_genera_data = ''
                for next_genus in genera:
                    genus_count = str( len( genera_counts[ next_genus ] ) )
                    all_genera_counts = all_genera_counts + next_genus[ :3 ] + '_' + genus_count + ' '
                    all_genera_data = all_genera_data + genus_count + '\t'
                all_genera_counts = all_genera_counts[ :-1 ]
                all_genera_data = all_genera_data[ :-1 ]
                
                blast_secretome_count_data = blastSecretome_countsData[ next_secretome ]
                original_cluster_size = blast_secretome_count_data.split( '___' )[ 0 ]
                original_genera_counts = blast_secretome_count_data.split( '___' )[ 1 ]
                original_secretome = next_secretome

                dropped_count = str( int( len( droppers ) ) )

                output = 'Integrated_Secretome-leonid_ssp709-' + secretome_core_id + '-cluster_' + str( count ) + '\t' + original_secretome + '\t' + cluster_size  + '\t' + dropped_count + '\t' + original_cluster_size + '\t' + all_genera_counts + '\t' + original_genera_counts + '\t' + all_genera_data + '\t' + all_keeper_secretome_seqids + '\n'
                output_clusters.write( output )
        
            for next_dropper in droppers:
                output = next_dropper + '\t' + next_secretome + '\n'
                output_droppers.write( output )
                
        output_keepers.close()
        output_droppers.close()
        output_clusters.close()
        
input_blasts.close()
input_annotations_pfam_absent.close()
input_annotations_pfam_ok.close()
